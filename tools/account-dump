#! /usr/bin/php
<?php

// Change your database settings here:
$db = mysql_connect("localhost", "planeshift", "planeshift") or die ("Unable to connect!"); // host, user, pass
mysql_select_db("planeshift", $db) or die("Could not select database");

/* helper functions */

/** Executes an sql statement and returns it's result.
 *  
 *  @param query Sql query to execute
 *  @return the result of the executed sql query
 */
function execute_sql($query)
{
    $result = mysql_query($query) or die("Query error:" . mysql_error() . "\n");
    return $result;
}

/**
 * Dumps the sql of a single row taking all entries.
 * It works generically with all the possible rows.
 *
 * @param tableArray An array containing the table row to parse.
 * @param tableName The name of the table containing this array, used
 *                   for preparing the string.
 * @param dumpFirstColumn If False will substituite the first column value with 0,
 *                        which trigger autoincrement on insert.
 * @return a string with a single insert statement
 */
function dump_sql_row($tableArray, $tableName, $newID)
{
    global $newaccountID, $newStartItemID, $oldAndNewIDMapping;
    $outputQuery = "INSERT INTO $tableName VALUES (";

    $currentField = 1;

    //creates the ...x,y,z... part of the statement, wrap all in '' and escape the value
    foreach($tableArray as $value)
    {
        // get the current value
        $tmp = mysql_real_escape_string($value);
        //echo "$tableName $currentField $tmp \n";

        // only for item_instances table sets new id
        if ($currentField==1 && $tableName=="item_instances") {
          $outputQuery .= "'$newStartItemID',";
          // populates the array of oldid -> newid for usage in parent_item_id
          $oldAndNewIDMapping[$tmp] = $newStartItemID;
          //var_dump($oldAndNewIDMapping);
          echo "#Mapped old: ". $tmp . " to new: ". $newStartItemID."\n";
          $newStartItemID++;
        }
        //Always place our new ID at the beginning
        else if ($currentField==1) {
           $outputQuery .= $newID . ",";
        }

        // only for item_instances table sets char_id_owner
        else if ($currentField==2 && $tableName=="item_instances") {
          $outputQuery .= "'$newID',";
        }

        // only for item_instances table and parent id present, then sets new parent id
        else if ($currentField==4 && $tableName=="item_instances" && $tmp!="") {
          $newvalue = $oldAndNewIDMapping[$tmp];
          $outputQuery .= "'$newvalue',";
          echo "#Reassigned parent: ". $tmp . " to " . $newvalue . "\n";
        }

        // only for characters table sets account_id field
        else if ($currentField==46 && $tableName=="characters") {
          $outputQuery .= "'$newaccountID',";
        }

        else {
          $outputQuery .= "'".$tmp."',";
        }
        $currentField++;
    }

    return substr($outputQuery,0,strlen($outputQuery)-1) . ");"; //we have to remove trailing ,
}

/**
 * Executes a query and then dumps all rows of the result.
 * It works generically with all the possible queries.
 *
 * @param query The query to execute.
 * @param tableName The name of the table used in this query, used
 *                  for preparing the string.
 * @param dumpFirstColumn If False will substituite the first column value with 0.
 *                        Usually used for id auto increment use with mysql.
 *                        This is passed to dump_sql_row.
 * @return a string with all the insert statement generated by the query.
 */

function dump_sql($query, $tableName, $newID)
{
    $queryOutput = "";
    $queryRows = execute_sql($query);
    //processes all the rows returned by the query.
    while($queryRow = mysql_fetch_row($queryRows))
    {
        $queryOutput .= dump_sql_row($queryRow, $tableName, $newID) . "\n";
    }
    return $queryOutput;
}

/** Gets the id of the account starting from the username.
 *
 *  @param The username which we are searching.
 *  @return The ID of the found account if found.
 */

function getAccountIDFromName($username)
{
    //search by username
    $accountID_query = execute_sql("SELECT id FROM accounts WHERE username = '$username'");

    //if we got zero rows it means the account wasn't found. Drop out.
    if(mysql_num_rows($accountID_query) == 0)
        die("Account ".$username." not Found!\n");

    return mysql_result($accountID_query, 0, "id");
}

/*main function*/

$accountID = 0;

if($argc < 4) //not enough arguments.
{
    die("Syntax: syntax: account-dump <old account ID|account Username> <new account ID> <new start char ID> <new start item ID>\n");
}

if(!is_numeric($argv[1])) //if the argument isn't a number search by name
{
    $accountID = getAccountIDFromName($argv[1]);
}
else
{
    $accountID = $argv[1];
}

if(!is_numeric($argv[2]) || !is_numeric($argv[3]) || !is_numeric($argv[4])) //if the argument isn't a number give an error
{
    die("New IDs should be a number.\n syntax: account-dump <old account ID|account Username> <new account ID> <new start char ID> <new start item ID>\n");
}
else
{
    $newaccountID = $argv[2];
    $newStartCharID = $argv[3];
    $newStartItemID = $argv[4];
}


//dump the account statement
$account_query = execute_sql("SELECT * FROM accounts WHERE id = '$accountID'");

if(mysql_num_rows($account_query) == 0)
    die("Account ".$argv[1]." not Found!\n");

printf(dump_sql_row(mysql_fetch_row($account_query), "accounts",$newaccountID) . "\n\n");

//find characters present in the ezchars table

//FIX: This line is only for EZPC migration, otherwise use next commented line 
$charactersRows = execute_sql("SELECT * FROM characters c WHERE account_id = '$accountID' and id in (select id from ezchars)");
//$charactersRows = execute_sql("SELECT * FROM characters c WHERE account_id = '$accountID'");


//we found no characters in this account? empty account? no need to go over.
if(mysql_num_rows($charactersRows) == 0)
    die("Account ".$argv[1]." has no characters!\n");

//dump each character with all it's sub data.
while($characterRow = mysql_fetch_row($charactersRows))
{
    // dump character
    $characterID = $characterRow[0]; //copy the character id for later use.
    printf("\n\n" . dump_sql_row($characterRow, "characters", $newStartCharID) . "\n\n");

    //dump character quests
    printf(dump_sql("SELECT * FROM character_quests where player_id = '$characterID'", "character_quests", $newStartCharID));
    //dump character skills
    printf(dump_sql("SELECT * FROM character_skills where character_id = '$characterID'", "character_skills", $newStartCharID));
    //dump character traits
    printf(dump_sql("SELECT * FROM character_traits where character_id = '$characterID'", "character_traits", $newStartCharID));
    //dump character factions
    printf(dump_sql("SELECT * FROM character_factions where character_id = '$characterID'", "character_factions", $newStartCharID));
    //dump player spells
    printf(dump_sql("SELECT * FROM player_spells where player_id = '$characterID'", "player_spells", $newStartCharID));
    //dump items
    printf(dump_sql("SELECT * FROM item_instances where char_id_owner = '$characterID' order by parent_item_id asc", "item_instances", $newStartCharID));

    //TODO: Complete npc dumping
    //these will give results only with npc.
    //dump merchant_item_categories
    printf(dump_sql("SELECT * FROM merchant_item_categories where player_id = '$characterID'", "merchant_item_categories", $newStartCharID));

    //increment new char ID by one
    $newStartCharID++;
}

?>
