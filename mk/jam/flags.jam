#============================================================================
# Rules for specifying compiler and linker flags
# Copyright (C)2003-2008 by Eric Sunshine <sunshine@sunshineco.com>
# Copyright (C)2005-2007 by Frank Richter
# Copyright (C)2003 by Matze Braun <matzebraun@users.sourceforge.net>
#
#    This library is free software; you can redistribute it and/or modify it
#    under the terms of the GNU Library General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or (at your
#    option) any later version.
#
#    This library is distributed in the hope that it will be useful, but
#    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
#    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
#    License for more details.
#
#    You should have received a copy of the GNU Library General Public License
#    along with this library; if not, write to the Free Software Foundation,
#    Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#============================================================================

##  LinkWith target : libs
##    Link an application with libraries. The specified libraries should have
##    build rules in the same project. For external libraries use the
##    ExternalLibs rule. Specify the library names without any extensions or
##    the leading "lib".
rule LinkWith
{
  local rawlibs = [ ResolveLibs $(>) ] ;

  if ( $($(<)_TYPE) = library ) && ( "$($(<)_SHARED)" = "" )
  {
    # LibDepends for shared libs invokes LinkWith, so prevent recursion
    LibDepends $(<) : $(rawlibs) ;
  }
  
  local i libs ;
  for i in $(rawlibs)
  {
    libs += [ ConstructLibraryLinkTarget $(i) : $($(i)_SHARED) ] ;
  }

  Depends $($(<)_TARGET) : $(rawlibs) ;
  NEEDLIBS on $($(<)_TARGET) =
    [ MergeRemovingDups [ on $($(<)_TARGET) GetVar NEEDLIBS ] : $(libs) ] ;
  $(<).NEEDLIBS += $(rawlibs) ;

  for l in $(rawlibs)
  {
    LFlags $(<) : $($($(l).EXTERNALLIBS).LFLAGS) ;
  }
}

##  CFlags target : flags [ : options ]
##    Sets cflags on all sourcefiles of a library, plugin or application target
##    This rule affects c++ and c compiler flags.
rule CFlags
{
  local target = $(1) ;
  local flags = [ InferFlagTuples $(2) ] ;
  local options = $(3) ;

  CCFLAGS on $($(target)_OBJECTS) += $(flags) ;
  C++FLAGS on $($(target)_OBJECTS) += $(flags) ;

  UnitTestCFlags $(target) : $(flags) : $(options) ;
}

##  LFlags target : flags [ : options ]
##    Sets linker flags for a library, plugin or application target
rule LFlags
{
  local target = $(1) ;
  local flags = [ InferFlagTuples $(2) ] ;
  local options = $(3) ;

  NotFile $(flags) ;
  NEEDLIBS on $($(target)_TARGET) =
    [ RemoveDupFlags [ on $($(target)_TARGET) GetVar NEEDLIBS ] $(flags) ] ;
  $(target).LFLAGS = [ RemoveDupFlags $($(target).LFLAGS) $(flags) ] ;
  if ! [ IsElem noexternal : $(3) ]
  {
    $(target).LFLAGS.EXTERNAL = [ RemoveDupFlags $($(target).LFLAGS.EXTERNAL) $(flags) ] ;
  }

  UnitTestLFlags $(target) : $(flags) : $(options) ;
}

##  ExternalLibs target : identifiers
##    Specify a dependency between 'target' and the external libraries
##    indicated by 'identifiers'.  If 'target' is an application or plugin,
##    then it is linked against the indicated external libraries.  If 'target'
##    is a library, then its dependency upon 'identifiers' is noted, and
##    applications or plugins which link against 'target' will also be linked
##    against the libraries indicated by 'identifiers'.  'identifiers' is a
##    list of base names of a set of variables which provide build tool
##    information about each external library.  In particular, assuming that
##    `ident' is one element of `identifiers', the value of $(ident).CFLAGS
##    should provide compiler flags needed for the external library indicated
##    by 'ident'; and $(ident).LFLAGS should provide linker flags for the
##    library.
rule ExternalLibs
{
  local extlib ;
  for extlib in $(>)
  {
    CFlags $(<) : $($(extlib).CFLAGS) ;
    LFlags $(<) : $($(extlib).LFLAGS) ;
    
    $(<).EXTERNALLIBS += $(extlib) ;
  }
  for target in $($(<).PROPAGATE_EXTERNALLIBS)
  {
    ExternalLibs $(target) : $(>) ;
  }
}

##  ExtraObjects target : objectfiles [ : options ]
##    Link additional object files with a target.
##    Options:
##      inheritcflags: The mentioned object files will inherit compiler flags
##      assigned to target's normal object files (in addition to any flags
##      already set manually).
rule ExtraObjects
{
  CheckOptions inheritcflags : $(3) : $(<) ;
  if [ IsElem inheritcflags : $(3) ]
  {
    $(<)_OBJECTS += $(>) ;
  }
  EXTRAOBJECTS on $($(<)_TARGET) += $(>) ;
  Depends $($(<)_TARGET) : $(>) ;
  Clean $(<)clean : $(>) ;
  Clean clean : $(>) ;
}

rule Concatenate
{
  local result = $(1[1]) ;
  # Concatenate array into single string
  local s ;
  for s in $(1[2-])
  {
    result = "$(result) $(s)" ;
  }
  return $(result) ;
}

##  RelayLFlags lflags : relaylibs [: minimal-objects ]
##    Get LFLAGS for relay-linking libraries. See RelayLibs for
##    more information.
rule RelayLFlags
{
  local relay_lflags = $(1) ;
  local relay_libs = $(2) ;
  local minimal_libs = $(3) ;
  if $(TARGET.OS) = "WIN32" || ! $(CMD.RELAYTOOL)
  {
    return $(relay_lflags) ;
  }
  else
  {
    local relayparamslist = "--relay $(relay_libs)" ;
    # Concatenate arrays into single strings
    local lflags = [ Concatenate $(relay_lflags) ] ;
    local relayparam = [ Concatenate $(relayparamslist) ] ;
    local cflags = [ Concatenate "$(CCFLAGS)" "$(type_cflags)" ] ;
    local minimalparam = "" ;
    if "$(4)" != ""
    {
      minimalparam = "--minimal-list \"$(minimal_libs)\"" ;
    }
    local extlib result_lflags ;
    local CC = [ Concatenate "$(CMD.CC)" ] ;
    result_lflags +=  
      "`CC=\"$(CC)\" CFLAGS=\"$(cflags)\" $(CMD.RELAYTOOL) --out-dir $(LOCATE_TARGET) $(minimalparam) $(relayparam) $(lflags)`"  ; 
    return $(result_lflags) ;
  }
}

##  RelayObjs target : relaylibs : identifier
rule RelayObjs
{
  if $(TARGET.OS) = "WIN32" || ! $(CMD.RELAYTOOL)
  {
    # Create fake libwhatever_is_present() symbols
    local stubfile = [ DoObjectGrist $(3).fake_stub.c ] ;
    MakeLocate $(stubfile) : $(LOCATE_TARGET) ;
    WHATEVER on $(stubfile) = $(2) ;
    WriteRelayLibStub $(stubfile) ;
    Clean $(<)clean : $(stubfile) ;
    
    local stub_object = [ CompileObjects $(stubfile) ] ;
    MakeLocate $(stub_object) : $(LOCATE_TARGET) ;
    Depends $($(<)_TARGET) : $(stub_object) ;
    Clean $(<)clean : $(stub_object) ;
    #EXTRAOBJECTS on $($(<)_TARGET) += $(stub_object) ;
    
    return $(stub_object) ;
  }
  else
  {
    return ;
  }
}

##  RelayLibs target : identifier : relaylibs
##    Link external libraries identified by 'identifier' with 'target' with
##    the help of "relaytool". This tool provides a wrapper object file that
##    dynamically loads the requested library at runtime. The client code can
##    check if a library is actually available and react gracefully if not.
##    This is much more end-user friendly than a refusal by the application to
##    start due to a missing dependency.
##    From the external dependency identified by 'identifier' the individual
##    libraries specified in 'relaylibs' will be dynamically loaded. For each
##    library 'foo' a symbol 'libfoo_is_present' will be provided.
rule RelayLibs
{
  local extlib ;
  for extlib in $(>)
  {
    # Construct list of object files for target.
    # Used by relaytool to compute a minimal set of symbols that need relaying.
    local minimal_list = "" ;
    local o ;
    for o in $($(<)_OBJECTS)
    {
      minimal_list = "$(minimal_list) $(LOCATE_TARGET)/$(o:G=)" ;
    }
    
    ExtraObjects $(<) : [ RelayObjs $(<) : $(3) : $(2) ] ;
    CFlags $(<) : $($(extlib).CFLAGS) ;
    LFlags $(<) : [ RelayLFlags $(COMPILER.LFLAGS) $($(extlib).LFLAGS) : $(3) : $(minimal_list) ] : noexternal ;
    
    $(<).RELAYDEPS += $(extlib) ;
    $(<).RELAYLIBS.$(extlib) = $(3) ;
  }
}

actions WriteRelayLibStub
{
  echo "" > $(<)
  whatever=`echo "$(WHATEVER)" | tr '-' '_' | tr '.' '_' `
  my_IFS=$IFS; IFS=" "
  for w in ${whatever}
  do
    echo "int lib${w}_is_present = 1;" >> $(<)
    echo "int lib${w}_symbol_is_present (char* s) { return 1; }" >> $(<)
  done
  IFS=$my_IFS
}

##  MergeLFlags flags1 : flags2
##    Merge two arrays of linker flags.
##    DEPRECATED: Use the generic MergeRemovingDups rule instead.
rule MergeLFlags
{
  return [ MergeRemovingDups $(1) : $(2) ] ;
}

##  InferFlagTuples switches
##    Given an array of build switches, infer which switches consist of
##    multiple arguments, and return a list in the same order but with
##    multiple-argument switches converted to atomic array elements. For
##    instance, given the seven-element input array [-foo, -bar, cow, -smurf,
##    -flub, glub, blug], returns the four-element array [-foo, -bar cow,
##    -smurf, -flub glub blug].  Multiple-argument switches are identified by a
##    token with "-" or "/" prefix or by the shell backtick (`) operator,
##    followed by one or more non-prefixed tokens.  The shell backtick operator
##    is considered a switch-introducer since it may be used by specialized
##    build rules to determine build flags dynamically at build-time (rather
##    than statically at configuration time).
rule InferFlagTuples
{
  local tuples ;
  local accum ;
  local flag ;
  for flag in $(1)
  {
    if [ Match ^([-/`][A-Za-z0-9]) : $(flag) ]
    {
      if $(accum)
      {
        tuples += $(accum:J=" ") ;
        accum = ;
      }
    }
    accum += $(flag) ;
  }
  if $(accum)
  {
    if $(tuples) {
      tuples += $(accum:J=" ") ;
    } else {
      tuples = $(accum) ;
    }
  }
  return $(tuples) ;
}

##  RemoveDupFlags switches
##    Remove duplicates from an array of build switches. Unlike the generic
##    RemoveDups rule which removes all but the first duplicated item,
##    RemoveDupFlags removes all but the last duplicated item. This makes it
##    convenient for folding duplicates out of an array of linker switches,
##    which typically are order-sensitive, and in which the final instance of a
##    duplicated switch has highest precedence.
rule RemoveDupFlags
{
  return [ Reverse [ RemoveDups [ Reverse $(1) ] ] ] ;
}

#----------------------------------------------------------------------------
# private part

##  ResolveLibs libs
##    Given a list of libraries, augment the list by adding other libraries
##    upon which the given libraries depend.  Dependencies between libraries
##    are specified via LibDepends (or LinkWith when the target is a library).
##    The returned list is ordered such that it is suitable for Unix linkers
##    which are sensitive to the order of libraries in the invocation
##    statement.
rule ResolveLibs
{
  local i libs ;
  for i in $(<)
  {
      libs += $(i) $($(i)_depends) ;
  }
  return [ RemoveDupFlags $(libs) ] ;
}
