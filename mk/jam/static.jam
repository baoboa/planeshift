#============================================================================
# Utility rules for static builds without plugins
# Copyright (C)2003 by Matze Braun <matzebraun@users.sourceforge.net>
#
#    This library is free software; you can redistribute it and/or modify it
#    under the terms of the GNU Library General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or (at your
#    option) any later version.
#
#    This library is distributed in the hope that it will be useful, but
#    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
#    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
#    License for more details.
#
#    You should have received a copy of the GNU Library General Public License
#    along with this library; if not, write to the Free Software Foundation,
#    Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#============================================================================
# all private

rule GenerateStaticPluginBoilerplate
{
  local tag = $(>) ;
  ResponseFile $(<) :
    "// This file is automatically generated."
    "#include \"cssysdef.h\""
    "#include \"csutil/scf.h\""
    ""
    "// Put static linking stuff into own section."
    "// The idea is that this allows the section to be swapped out but not"
    "// swapped in again b/c something else in it was needed."
    "#if !defined(CS_DEBUG) && defined(CS_COMPILER_MSVC)"
    "#pragma const_seg(\".CSmetai\")"
    "#pragma comment(linker, \"/section:.CSmetai,r\")"
    "#pragma code_seg(\".CSmeta\")"
    "#pragma comment(linker, \"/section:.CSmeta,er\")"
    "#pragma comment(linker, \"/merge:.CSmetai=.CSmeta\")"
    "#endif"
    ""
    "struct $(tag) { $(tag) (); };"
    "$(tag)::$(tag) () {}"
    ""
    : notfile ;
}

rule GenerateStaticPluginInstantiation
{
  local tag = $(3) ;
  GenerateStaticPluginBoilerplate $(<) : $(tag) ;
  ResponseFile $(<) : "SCF_USE_STATIC_PLUGIN($(>:B))" : notfile ;
}

rule GenerateStaticPluginRegistration
{
  GenerateStaticPluginBoilerplate $(<) ;
  GenerateStaticPluginRegistration1 $(<) : $(>) ;
}

rule BuildStaticRegFile
{
  local statictarget = $(>) ;
  # prepare source files
  local sources = [ DoObjectGrist _$(<)_static_reg.cpp ] ;
  local object = [ CompileObject $(sources) ] ;

  MakeLocate $(sources) : $(LOCATE_TARGET) ;
  MakeLocate $(object) : $(LOCATE_TARGET) ;
  C++FLAGS on $(object) += $($($(<).EXTERNALLIBS).CFLAGS) ;

  local metalist metafile i ;
  for i in $(<)
  {
    metafile = $($(i)_METAFILE) ;
    metalist += $(metafile) ;
    Depends $(sources) : $(metafile) ;
  }
  
  GenerateStaticPluginRegistration $(sources) : $(metalist) ;
  Clean $(statictarget)clean : $(sources) ; 
  Clean $(statictarget)clean : $(object) ; 
  return $(object) ;
}

rule BuildStaticUseFile
{
  local statictarget = $(2) ;
  local package = $(3) ;
  # prepare source files
  local sources tag ;
  if $(package)
  {
    sources = [ DoObjectGrist _cs_static_use_$(package).cpp ] ;
    tag = "_static_use_$(package)" ;
  }
  else
  {
    sources = [ DoObjectGrist _cs_static_use.cpp ] ;
    tag = "_static_use" ;
  }
  local object = [ CompileObject $(sources) ] ;

  MakeLocate $(sources) : $(LOCATE_TARGET) ;
  SEARCH on $(sources) = $(LOCATE_TARGET) ;
  MakeLocate $(object) : $(LOCATE_TARGET) ;
  
  C++FLAGS on $(object) += $($($(>).EXTERNALLIBS).CFLAGS) ;

  GenerateStaticPluginInstantiation $(sources) : $(<) : $(tag) ;
  Clean $(statictarget)clean : $(sources) ; 
  Clean $(statictarget)clean : $(object) ; 
  return $(object) ;
}

rule GeneratePluginLibraryGlueApp
{
  ResponseFile $(<) :
    "// This file is automatically generated."
    "#include \"cssysdef.h\""
    ""
    "struct CS_IMPORT_SYM _Bind_$(2)"
    "{"
    "  _Bind_$(2) ();"
    "};"
    ""
    "namespace { _Bind_$(2) bind_$(2); }"
    : notfile ;
}

rule GeneratePluginLibraryGlueLib
{
  local tag = $(3) ;
  ResponseFile $(<) :
    "// This file is automatically generated."
    "#include \"cssysdef.h\""
    ""
    "#if defined(CS_USE_SHARED_LIBS)"
    "  CS_DECLARE_DEFAULT_STATIC_VARIABLE_REGISTRATION"
    "  // Needed to work around some order of initialization issues"
    "  static void csStaticVarCleanup_local (void (*p)())"
    "  { csStaticVarCleanup_csutil (p); }"
    "  CS_DEFINE_STATIC_VARIABLE_REGISTRATION (csStaticVarCleanup_local);"
    "#endif"
    ""
    "struct CS_EXPORT_SYM _Bind_$(2)"
    "{"
    "  _Bind_$(2) ();"
    "};"
    "struct $(tag) { $(tag) (); };"
    ""
    "_Bind_$(2)::_Bind_$(2) () {}"
    "// Needed to pull in _cs_static_use object file"
    "namespace { $(tag) $(tag)_bind; }"
    : notfile ;
}

rule BuildStaticGlueFile
{
  local target = $(1) ;
  local plugin_lib_name = $(2) ;
  local package = $(3) ;
  local target_type = $(4) ;
  # prepare source files
  local sources tag ;
  if $(package)
  {
    sources = [ DoObjectGrist _cs_static_glue_$(target_type)_$(package).cpp ] ;
    tag = "_static_use_$(package)" ;
  }
  else
  {
    sources = [ DoObjectGrist _cs_static_glue_$(target_type).cpp ] ;
    tag = "_static_use" ;
  }
  local object = [ CompileObject $(sources) ] ;

  MakeLocate $(sources) : $(LOCATE_TARGET) ;
  SEARCH on $(sources) = $(LOCATE_TARGET) ;
  MakeLocate $(object) : $(LOCATE_TARGET) ;
  
  if $(target_type) = "app"
  {
    GeneratePluginLibraryGlueApp $(sources) : $(plugin_lib_name) ;
  }
  else
  {
    GeneratePluginLibraryGlueLib $(sources) : $(plugin_lib_name) : $(tag) ;
  }
  Clean $(target)clean : $(sources) ; 
  Clean $(target)clean : $(object) ; 
  return $(object) ;
}

##  LinkStaticPlugins target : plugins [: optionalplugins] [: package]
##    Builds the plugins in 'plugins' (and 'optionalplugins') statically into 
##    'target'. Can be used both for static plugins from the local project or
##    an external project. In the latter case, the project's static plugin
##    library has to have been built, also, the "<package>.STATICDEPS" 
##    variable must contain a path to a specially generated Jamfile that 
##    contains information about the plugins provided by as well as external
##    dependencies. The static plugins library for both local and external 
##    package must be explicitly linked into 'target'.
rule LinkStaticPlugins
{
  local package target plugins optplugins ;
  # Fetch the parameters
  target = $(1) ;
  plugins = $(2) ;
  optplugins = $(3) ;
  package = $(4) ;
  
  local target_link_with target_lflags lflags_target relayobjs ;
  if ( $(BUILD_SHARED_LIBS) = "yes" ) && ( $(TRUE_STATIC_PLUGINS) != "yes" )
  {
    local plugin_lib_name ;
    if $(package)
    {
      plugin_lib_name = $(target)_plugins_$(package) ;
    }
    else
    {
      plugin_lib_name = $(target)_plugins ;
    }
    
    lflags_target = $(plugin_lib_name) ;
  }
  else
  {
    lflags_target = $(target) ;
  }
  
  if $(package)
  {
    # External static plugins.
    # First include static plugin info
    if ! $(HAVE_STATICDEPS.$(package))
    {
      if ! $($(package).STATICDEPS)
      {
        Echo "$(target): Warning: no dependencies file for static plugin package \"$(package)\"" ;
      }
      include $($(package).STATICDEPS) ;
      HAVE_STATICDEPS.$(package) = yes ;
    }
    local lflags p ;
    # Collect optional plugins
    for p in $(optplugins)
    {
      if [ IsElem $(p) : $(STATICPLUGINS.AVAILABLE) ]
      {
	plugins += $(p) ;
      }
    }
    # Grab flags
    for p in $(plugins)
    {
      NotFile $(p) ;
      if ! [ IsElem $(p) : $(STATICPLUGINS.AVAILABLE) ]
      {
        Echo "$(target): Warning: Static plugin \"$(p)\" from package \"$(package)\" not available." ;
      }
      CFlags $(target) : $(STATICPLUGIN.$(p).CFLAGS) ;
      local staticplugin_lflags = [ InferFlagTuples $(STATICPLUGIN.$(p).LFLAGS) ] ;
      lflags = [ MergeRemovingDups $(lflags) : $(staticplugin_lflags) ] ;
      
      local relaydeps = $(STATICPLUGIN.$(p).RELAYDEPS) ;
      for relaydep in $(relaydeps)
      {
        CFlags $(target) : $(STATICPLUGIN.$(p).RELAYCFLAGS.$(relaydep)) ;
	local staticplugin_relayflags = [ InferFlagTuples $(STATICPLUGIN.$(p).RELAYLFLAGS.$(relaydep)) ] ;
        lflags = [ MergeRemovingDups $(lflags) : 
          [ RelayLFlags $(COMPILER.LFLAGS) $(staticplugin_relayflags) :
            $(STATICPLUGIN.$(p).RELAYLIBS.$(relaydep)) ] ] ;
	# @@@ If we can get the .a file name for the static plugin lib
	# we could pass that for the minimal-objects
        relayobjs += [ RelayObjs $(lflags_target) :
            $(STATICPLUGIN.$(p).RELAYLIBS.$(relaydep)) : $(relaydep) ] ;
      }
    }
    target_lflags = $(lflags) ;
  }
  else
  {
    # Local static plugins
    local lflags libs p ;
    libs = $(STATICPLUGINS.LIBRARY) ;
    # Collect optional plugins
    for p in $(optplugins)
    {
      if $($(p)_TARGET)
      {
	plugins += $(p) ;
      }
    }
    # Grab flags
    for p in $(plugins)
    {
      local staticplugin_lflags = [ InferFlagTuples $($(p).LFLAGS.EXTERNAL) ] ;
      lflags += [ Filter $(staticplugin_lflags) : $(LINKLIBS) $(PLUGIN.LFLAGS) ] ;
      libs += $($(p).NEEDLIBS) ;
      
      local relaydeps = $($(p).RELAYDEPS) ;
      for relaydep in $(relaydeps)
      {
	local libpath ;
	libpath = [ ConcatDirs
	  [ on $($(STATICPLUGINS.LIBRARY)_TARGET) GetVar SEARCH ] 
	  $($(STATICPLUGINS.LIBRARY)_TARGET)
	] ;
	local staticplugin_relayflags = [ InferFlagTuples $($(relaydep).LFLAGS) ] ;
	lflags = [ MergeRemovingDups $(lflags) : 
	  [ RelayLFlags $(COMPILER.LFLAGS) $(staticplugin_relayflags) :
	    $($(p).RELAYLIBS.$(relaydep)) : $(libpath) ] ] ;
	relayobjs += [ RelayObjs $(target) :
	    $($(p).RELAYLIBS.$(relaydep)) : $(relaydep) ] ;
      }
    }
    target_link_with = [ RemoveDupFlags $(libs) ] ;
    target_lflags = [ RemoveDups $(lflags) ] ;
  }
  
  # construct initialization sourcefile
  local staticobject = [ BuildStaticUseFile $(plugins) : $(target) : $(package) ] ;
  
  # Build a shared lib containing the static plugins.
  # This is done to be more LGPL-friendly.
  if ( $(BUILD_SHARED_LIBS) = "yes" ) && ( $(TRUE_STATIC_PLUGINS) != "yes" )
  {
    local libglue appglue ;
    libglue = [ BuildStaticGlueFile $(target) : $(lflags_target) 
      : $(package) : lib ] ;
    Library $(lflags_target) : $(libglue) $(staticobject) 
      $(relayobjs) : 
      noinstall notest independent nohelp shared ;
    LibDepends $(lflags_target) : $(target_link_with) ;
    LFlags $(lflags_target) : $(target_lflags) ;
    # We need to get the external libs for the plugin lib; but they have to be 
    # specified after LinkStaticPlugins
    $(target).PROPAGATE_EXTERNALLIBS += $(lflags_target) ;
    
    appglue = [ BuildStaticGlueFile $(target) : $(lflags_target) 
      : $(package) : app ] ;
    ExtraObjects $(target) : $(appglue) : inheritcflags ;
    LinkWith $(target) : $(lflags_target) ;
    LFlags $(target) : $(target_lflags) ;
  }
  else
  {
    LinkWith $(target) : $(target_link_with) ;
    LFlags $(target) : $(target_lflags) ;
    ExtraObjects $(target) : $(staticobject) $(relayobjs) : inheritcflags ;
  }
}

##  StaticPluginLibrary name [: rejects]
##    Create a library that monolithically contains statically linkable 
##    versions of all plugins, and also provides a target to install this
##    library ("install_staticplugins") as well as resources to facilitate the
##    use of that library from external projects. Also, most plugins will
##    probably themselves depend on other libraries; while those are correctly
##    linked in with the static plugins, they are not built or installed when
##    the static plugin library is.
##    This library is intended to be used together with the 
##    "LinkStaticPlugins" rule.
rule StaticPluginLibrary
{
  local name = $(<) ;
  local rejects = $(>) ;
  local t ;
  
  STATICPLUGINS.LIBRARY = $(name) ;

  local targets = $(STATICPLUGINS.SUBTARGETS) ;
  if $(rejects)
  {
    targets = [ Filter $(targets) : $(rejects) ] ;
  }
  local objects ;
  for t in $(targets)
  {
    objects += $(STATICPLUGINS.OBJECTS.$(t)) ;
    local staticreginfoobject = [ BuildStaticRegFile $(t) : $(name) ] ;
    objects += $(staticreginfoobject) ;
  }
  
  # Set up library
  Library $(name) : $(objects) : noinstall notest independent nohelp ;
  SEARCH on $(name) += $(LOCATE_TARGET) ;
  MsvcDefine $(name) : $(STATICPLUGINS.MSVC_DEFINES) ;
  CFlags $(name) : [ FDefines CS_STATIC_LINKED ] ;
  
  # Copy a variety of flags
  local o ;
  for o in $(objects)
  {
    local sourceobj = $(STATICPLUGINS.OBJECTS.$(o)) ;
    if $(sourceobj)
    {
      CCFLAGS on $(o) += [ on $(sourceobj) GetVar CCFLAGS ] ;
      C++FLAGS on $(o) += [ on $(sourceobj) GetVar C++FLAGS ] ;
    }
  }

  # Write out needed CFLAGS, LFLAGS
  STATICPLUGINS.DEPENDENCIES = $(name).jam ;
  MakeLocate $(STATICPLUGINS.DEPENDENCIES) : $(LOCATE.OBJECTS)/libs ;
  for t in $(targets)
  {
    WriteDependencies $(STATICPLUGINS.DEPENDENCIES) : $(t) : $(name) ;
  }
  Depends $(name) : $(STATICPLUGINS.DEPENDENCIES) ;
  Clean $(name)clean : $(STATICPLUGINS.DEPENDENCIES) ;
 
  # Install targets
  Depends install_staticplugins : 
    [ DoInstall [ ConstructLibraryTarget $(name) ] : $(libdir) ] ;
  Depends install_staticplugins : $(STATICPLUGINS.DEPENDENCIES) ;
  Depends install_staticplugins : 
    [ DoInstall $(STATICPLUGINS.DEPENDENCIES) : $(libdir) ] ;
  Depends install_staticplugins : install_lib ;
    
  INSTALLEDLIBS_OPTIONAL += $(name) ;
  
  # Collect library dependencies. The idea is to built all libs needed by the
  # static plugins when "jam staticplugins" is invoked.
  for t in $(targets)
  {
    local deplibs ;
    if $($(t).NEEDLIBS)
    {
      deplibs += $($(t).NEEDLIBS) ;
    }
    deplibs = [ RemoveDups $(deplibs) ] ;
    Depends staticplugins : $(deplibs) ;
  }  
  Help staticplugins : 
    "Build the library with static versions of all plugins" ;
  Depends staticplugins : libs $(name) ;
}

#----------------------------------------------------------------------------

# Write out CFLAGS, LFLAGS needed by a plugin
rule WriteDependencies
{
  local cflags ;
  local lflags ;
  local depfile = $(<) ;
  local plugin = $(>) ;
  local name = $(3) ;
  local libname = [ LibraryBaseName $(name) ] ;
  local depfile_gristed = $(depfile:G=$(plugin)) ;
  MakeLocate $(depfile_gristed) : [ on $(depfile) GetVar LOCATE ] ;
  
  # Collect flags
  lflags = -l$(libname) ;
  local libs = [ ResolveLibs $($(plugin).NEEDLIBS) ] ;
  local l ;
  for l in $(libs)
  {
    libname = [ LibraryBaseName $(l) ] ;
    lflags = [ MergeRemovingDups $(lflags) : -l$(libname) ] ;
  }
  lflags += $(COMPILER.LFLAGS) ;
  for l in $($(plugin).EXTERNALLIBS)
  {
    cflags += $($(l).CFLAGS) ;
    lflags = [ MergeRemovingDups $(lflags) : [ Filter $($(l).LFLAGS) : $(LINKLIBS) $(PLUGIN.LFLAGS) ] ] ;
  }
  lflags = [ MergeRemovingDups $(lflags) : [ Filter $($(plugin).LFLAGS.EXTERNAL) : $(LINKLIBS) $(PLUGIN.LFLAGS) ] ] ;
  CFLAGS on $(depfile_gristed) = "$(cflags)" ;
  LFLAGS on $(depfile_gristed) = "$(lflags)" ;
  
  if $($(depfile).FIRSTTIME) != "yes"
  {
    WriteDepFlags1 $(depfile_gristed) : $(plugin) ;
    $(depfile).FIRSTTIME = "yes" ;
  }
  else
  {
    WriteDepFlags2 $(depfile_gristed) : $(plugin) ;
  }
  
  Depends $(depfile) : $(depfile_gristed) ;
  
  RELAYDEPS on $(depfile_gristed) = "$($(plugin).RELAYDEPS)" ;
  WriteRelayDeps $(depfile_gristed) : $(plugin) ;
  for relaydep in $($(plugin).RELAYDEPS)
  {
    local depfile_gristed2 = $(depfile_gristed:G=$(plugin).$(relaydep)) ;
    MakeLocate $(depfile_gristed2) : [ on $(depfile) GetVar LOCATE ] ;
    Depends $(depfile) : $(depfile_gristed2) ;
    
    RELAYDEP on $(depfile_gristed2) = $(relaydep) ;
    RELAYCFLAGS on $(depfile_gristed2) = "$($(relaydep).CFLAGS)" ;
    RELAYLFLAGS on $(depfile_gristed2) = "$($(relaydep).LFLAGS)" ;
    RELAYLIBS on $(depfile_gristed2) = "$($(plugin).RELAYLIBS.$(relaydep))" ;
    WriteRelayDepFlags $(depfile_gristed2) : $(plugin) ;
  }
}

actions WriteDepFlags1 
{
  cat << EOT > $(<)
STATICPLUGINS.AVAILABLE += $(>) ;
STATICPLUGIN.$(>).CFLAGS = $(CFLAGS) ;
STATICPLUGIN.$(>).LFLAGS = $(LFLAGS) ;
EOT
}

actions WriteDepFlags2 
{
  cat << EOT >> $(<)
STATICPLUGINS.AVAILABLE += $(>) ;
STATICPLUGIN.$(>).CFLAGS = $(CFLAGS) ;
STATICPLUGIN.$(>).LFLAGS = $(LFLAGS) ;
EOT
}

actions WriteRelayDeps
{
  cat << EOT >> $(<)
STATICPLUGIN.$(>).RELAYDEPS = $(RELAYDEPS) ;
EOT
}

actions WriteRelayDepFlags
{
  cat << EOT >> $(<)
STATICPLUGIN.$(>).RELAYLIBS.$(RELAYDEP) = $(RELAYLIBS) ;
STATICPLUGIN.$(>).RELAYCFLAGS.$(RELAYDEP) = $(RELAYCFLAGS) ;
STATICPLUGIN.$(>).RELAYLFLAGS.$(RELAYDEP) = $(RELAYLFLAGS) ;
EOT
}

actions piecemeal GenerateStaticPluginRegistration1
{
  echo 'namespace csStaticPluginInit' >> $(<)
  echo '{' >> $(<)
  for x in $(>)
  do
    n=`basename $x $(SUFMETA)`
    echo "static char const metainfo_${n}[] =" >> $(<)
    $(SED) 's:\\:\\\\:g;s:":\\":g;s:\(.*\):"\1":' < $x >>$(<)
    echo ";" >> $(<)
    $(SED) '/<implementation>/!d;s:[ 	]*<implementation>\(..*\)</implementation>:  #ifndef \1_FACTORY_REGISTER_DEFINED \
  #define \1_FACTORY_REGISTER_DEFINED \
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(\1) \
  #endif:g' < $x >> $(<)
  done
  echo '' >> $(<)
  for x in $(>)
  do
    n=`basename $x $(SUFMETA)`
    echo "class ${n}" >> $(<)
    echo "{" >> $(<)
    echo "SCF_REGISTER_STATIC_LIBRARY($n,metainfo_${n})" >>$(<)
    $(SED) '/<implementation>/!d;s:[ 	]*<implementation>\(..*\)</implementation>:  #ifndef \1_FACTORY_REGISTERED \
  #define \1_FACTORY_REGISTERED \
    \1_StaticInit \1_static_init__; \
  #endif:g' < $x >> $(<)
    echo "public:" >> $(<)
    echo " ${n}();" >> $(<)
    echo "};" >> $(<)
    echo "$n::$n() {}" >> $(<)
    echo "" >> $(<)
  done
  echo '}' >> $(<)
}
