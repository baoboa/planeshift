#============================================================================
# Utilities for uploading files to a server
# Copyright (C)2006-2007 by Frank Richter
#
#    This library is free software; you can redistribute it and/or modify it
#    under the terms of the GNU Library General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or (at your
#    option) any later version.
#
#    This library is distributed in the hope that it will be useful, but
#    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
#    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
#    License for more details.
#
#    You should have received a copy of the GNU Library General Public License
#    along with this library; if not, write to the Free Software Foundation,
#    Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#============================================================================

UPLOAD ?= "$(TOP)/bin/upload.sh" ;
SSH ?= ssh ;
SCP ?= scp ;
CMD.TAR ?= tar ;

##  UploadDir target : dir : server_and_user : serverpath
##    Upload a complete directory to a server.
##    server_and_user, serverpath specify the remote server + user (in the 
##    form user@remote.net) and path on the server respectively.
rule UploadDir
{
  local target = $(1) ;
  local dir = $(2) ;
  local server_user = $(3) ;
  local serverpath = $(4) ;
  DIR on $(target) = $(dir) ;
  SERVER_USER on $(target) = $(server_user) ;
  DESTPATH on $(target) = $(serverpath) ;
  DoUploadDir $(target) ;
}

actions DoUploadDir
{
  # Pack directory for transfer
  tempdir=${TEMP:-${TMP:-/tmp}}
  tempfile=`mktemp -u upload-XXXXXXXX`.tbz2
  cd $(DIR)
  $(CMD.TAR) -cjvf $tempdir/$tempfile *
  cd -
  # The actual transfer
  cd $tempdir
  $(SCP) $tempfile "$(SERVER_USER)://tmp/$tempfile"
  cd -
  # Unpack on the server
  $(SSH) $(SERVER_USER) "\
    cd $(DESTPATH); \
    tar --overwrite -xjvf /tmp/$tempfile; \
    rm -rf /tmp/$tempfile"
  # Cleanup
  rm $tempdir/$tempfile
}

##  UploadFile target : file : server_and_user : serverpath
##    Upload a single file to a server.
##    server_and_user, serverpath specify the remote server + user (in the 
##    form user@remote.net) and path on the server respectively.
rule UploadFile
{
  local target = $(1) ;
  local file = $(2) ;
  local server_user = $(3) ;
  local serverpath = $(4) ;
  FILE on $(target) = $(file) ;
  SERVER_USER on $(target) = $(server_user) ;
  DESTPATH on $(target) = $(serverpath) ;
  DoUploadFile $(target) : $(file) ;
}

actions DoUploadFile
{
  # Create target dir
  DESTPATH=$(DESTPATH)
  $(SSH) $(SERVER_USER) "mkdir -p $DESTPATH"
  # transfer file
  $(SCP) $(>) $(SERVER_USER):$(DESTPATH)/
}

##  UploadFiles target : files : server_and_user : serverpath
rule UploadFiles
{
  local target = $(1) ;
  local f ;
  for f in $(2)
  {
    local filetarget = $(target)_upload_$(f) ;
    UploadFile $(filetarget) : $(f) : $(3) : $(4) ;
    Depends $(target) : $(filetarget) ;
  }
}
